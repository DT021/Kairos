[chromedriver]
; Path to chromedriver on your local machine.
; Download chromedriver at http://chromedriver.chromium.org/downloads
path=
; If true, it will run in the background, Otherwise, it will open Chrome (useful for debugging).
run_in_background=false
; Defines how long chromedriver should wait for finding elements (seconds).
; This is on a lower level than wait_time_check (below) and should be an equal or higher number than said wait_time_check.
; 30 seconds should be ample and - unless you have serious issues running the script - you should not change this.
wait_time_implicit = 30
; Defines how long chromedriver should wait for a page to load.
page_load_timeout = 30
; Defines how long the script should wait finding elements (seconds).
; If you have problems completing the running of the script, set this to a higher number first (together with wait_time_break_mini).
wait_time_check = 30
; At various places I've added small brakes to allow the page to catch up after an interaction before moving on to the next interacting (seconds).
; I found 0.2 optimal for me, but if you have problems completing the running of the script, set this to a higher number.
wait_time_break_mini = 0.2
; At various places I've added brakes to allow the page to catch up after an interaction before moving on to the next interacting (seconds).
; I found 0.5 optimal for me, but if you have problems completing the running of the script, set this to a higher number first (together with wait_time_check).
wait_time_break = 0.5
; Allow the page to handle submitting the alert form and to allow the page to catch up (seconds).
; I found 2.5 optimal for me, but if you have problems completing the running of the script, set this to a higher number.
wait_time_submit_alert = 2.5

[logging]
; CRITICAL = 50
; ERROR = 40
; WARNING = 30
; INFO = 20
; DEBUG = 10
; NOTSET = 0
; If you encounter problems running the script it will likely be one of the following:
; - an unexpected popup (inc. tooltips) got fired which made the to be interacted with element hidden
; - it took to long for an element interaction to finish before the next one started
; - you opened tradingview separately which put you over the max devices making all elements on the page uninteractable
; Set this to 10 to get more debugging information. The information of the current / last run is saved to debug.log.
level=20

[tradingview]
username=
password=
; This is a fallback option when you don't provide a yaml file as an argument to the script, i.e. you run 'python main.py'
; instead of 'python main.py <my_alerts>.yaml'
; Settings is a YAML file that has all your preferences when setting up your alerts.
settings=_example.yaml
; Directory where your yaml files reside. Can be either a relative path to Kairos, or an absolute path.
settings_dir=tv
; Set this to the maximum number of server side alerts per your TradingView subscription, see https://www.tradingview.com/gopro/
max_alerts=10
; If you want to test this script, set it to a low number (like 5 or so). If you want to run all of your symbols choose a
; ridicolous high number such as 10000 or so.
max_symbols_per_watchlist=5
; restart_inactive_alerts will make your existing alerts active again at start up. Use this together with clear_inactive_alerts
; to safe your exisiting alerts. NOTE: this does not safe existing alerts it they fire whilst Kairos is running.
; If you need to ensure that your existing alerts remain in place than you'll have to set clear_alerts and clear_inactive_alerts
; to false. In which case you will be limited to the max server side alerts per your TradingView subscription plan.
restart_inactive_alerts=true
; clear_inactive_alerts will remove inactive alerts once at start up and during the run of the program itself. What you can do
; here is setting a low expiration on alerts and then clean them up while still running this script. For example, if you have a
; script that triggers alerts on the close of the previous bar then those alerts should fire within one minute, if not then
; they can be thrown away - saving you precious server side alerts.
clear_inactive_alerts=true
; If you have a very limited amount of alerts you can set, such as on a free plan or having a lot of existing alerts you'll need
; to keep, you can introduce a delay here to let the alerts expire. For example, say you have only one alert available, you can
; set the delay to 60 seconds and set the expiration date in the YAML file to 1 minute as well. Obviously, this trick will only
; work if you have set clear_inactive_alerts (above) to true. Note, that with the aforementioned example you essentially limit
; yourself to one alert per minute instead of the 5 (on average) normally.
delay_clear_inactive_alerts=0
; clear_alerts will remove ALL alerts (including any manually placed ones) once at start up.
clear_alerts=false
; Set this to true if values in your YAML file for your conditions are exact.
; If set to false, then conditions in TradingView will match if they start with the values you set in your YAML file. However,
; you still need to provide exact values for text fields and number fields (obviously).
exact_conditions=true

