[webdriver]
; Path to a webdriver on your local machine.
; Download chromedriver at http://chromedriver.chromium.org/downloads
path =
; Resolution to run chrome in (usually this is equal to the resolution of your device).
resolution = 1920,1080
; Run Kairos in the background
; Note: Kairos will open a separate browser in the foreground regardless of this setting when you import watchlists.
run_in_background = true
; Using the clipboard will improve the performance significantly (~30 seconds per alert). Normally, using the clipboard
; entails cut and paste keyboard shortcuts which uses the browser's own clipboard. However, there is one noted exception
; (see below) where data is actually written to the clipboard and then read from the clipboard as well. Writing and
; reading on the system clipboard will interfere with the active window if the browser Kairos uses isn't the active
; window.
; Note: if you want to import watchlists this has to be set to true. Importing watchlists is the only place where
; using the clipboard might interfere with other programs. Kairos cannot control the file upload dialog directly, so
; this is the only way. Fortunately, the file upload dialog is the active window by default.
clipboard = false
; Defines how long chromedriver should wait for a page to load (seconds).
page_load_timeout = 30
; Defines how long chromedriver should wait for finding elements (seconds).
; This is on a lower level than check_if_exists_timeout (below) and should be an equal or higher number than said option
; 30 seconds should be ample and - unless you have serious issues running the script - you should not change this.
wait_time_implicit = 30
; Defines how long the script should wait finding elements (seconds).
check_if_exists_timeout = 30

[tradingview]
; Your TradingView credentials
; You don't have to set this but if you don't you will be asked to provide them when Kairos starts
username=
password=
; YAML files define your alerts in TradingView.
; This is a fallback option when you don't provide a yaml file as an argument to the script, i.e. you run
; 'python main.py' instead of 'python main.py <my_alerts>.yaml'.
settings = refresh.yaml
; Directory where your yaml files reside. Can be either a relative path to Kairos, or an absolute path.
settings_dir = tv
; Set this to the maximum number of server side alerts per your TradingView subscription, see
; https://www.tradingview.com/gopro/
max_alerts = 200
; If you want to test this script, set it to a low number (like 5 or so). If you want to run all of your symbols choose
; a ridiculous high number such as 10000 or so.
max_symbols_per_watchlist = 10000
; restart_inactive_alerts will make your existing alerts active again at start up. Use this together with
; clear_inactive_alerts to safe your existing alerts. NOTE: this does not safe existing alerts it they fire whilst
; Kairos is running.
; If you need to ensure that your existing alerts remain in place than you'll have to set clear_alerts and
; clear_inactive_alerts to false. In which case you will be limited to the max server side alerts per your TradingView
; subscription plan.
restart_inactive_alerts = true
; clear_inactive_alerts will remove inactive alerts once at start up and during the run of the program itself. What you
; can do here is setting a low expiration on alerts and then clean them up while still running this script. For example,
; if you have a script that triggers alerts on the close of the previous bar then those alerts should fire within one
; minute, if not then they can be thrown away - saving you precious server side alerts.
clear_inactive_alerts = true
; clear_alerts will remove ALL alerts (including any manually placed ones) once at start up.
clear_alerts = false
; Set this to true if values in your YAML file for your conditions are exact.
; If set to false, then conditions in TradingView will match if they start with the values you set in your YAML file.
; However, you still need to provide exact values for text fields and number fields (obviously).
exact_conditions = false
; Setting the actual alert on TradingVIew can go wrong in more ways than can be thought of. Although, the plethora of
; options to set delays (see section delays) will alleviate most timing problems, it still will generate an exception
; now and then. A retry will refresh the page and simply try again.
create_alert_max_retries = 2
; Use TV's screenshot feature instead of making a screenshot from a web element itself. The latter is significantly quicker but
; you may be in violation of TradingView's term of use (see https://www.tradingview.com/policies/).
; See also screenshot_dialog option under delays.
tradingview_screenshot = false

; If you have problems completing the running of the script, set the delays below to a higher number.
[delays]
; Delay after symbol get's changed, or the chart get's loaded (seconds).
; Charts with a lot of data plotted are slower to change from symbol.
change_symbol = 1
; Allow the page to handle submitting the alert form and to allow the page to catch up (seconds).
; If you have problems completing the running of the script, set this to a higher number.
submit_alert = 2.5
; At various places brakes are added to allow the page to catch up after an interaction before moving on to the next
; interacting (seconds). Used multiple times per alert.
break = 0.5
break_mini = 0.2
; if you have a very limited amount of alerts you can set, such as on a free plan or having a lot of existing alerts
; you'll need to keep, you can introduce a delay here to let the alerts expire. For example, say you have only one alert
; available, you can set the delay to 60 seconds and set the expiration date in the YAML file to 1 minute as well.
; Obviously, this trick will only work if you have set clear_inactive_alerts (above) to true. Note, that with the
; aforementioned example you essentially limit yourself to one alert per minute instead of the 5 (on average) normally.
; This value is used only when you run out of alerts.
clear_inactive_alerts = 0
; Allow the screenshot dialog to load
; Only relevant when [tradingview] option tradingview_screenshot is set to true
screenshot_dialog = 2
; Give the page some extra time load prior to making the screenshot.
; Only relevant when [tradingview] option tradingview_screenshot is set to false and [logging] option screenshot_path is
; set.
screenshot = 0
; Pause between keystrokes (seconds), e.g. 0, 0.1, 0.01
keystroke = 0

[logging]
; CRITICAL = 50
; ERROR = 40
; WARNING = 30
; INFO = 20
; DEBUG = 10
; NOTSET = 0
; If you encounter problems running the script it will likely be one of the following:
; - an unexpected popup (inc. tooltips) got fired which made the to be interacted with element hidden
; - it took to long for an element interaction to finish before the next one started
; - you opened tradingview separately which put you over the max devices making all elements on the page non-interactive
; Set this to 10 to get more debugging information. The information of the current / last run is saved to debug.log.
level = 20
; Clear the log file at start up.
clear_on_start_up = true
; Path were screenshots are stored, e.g. screenshots (don't use quotation marks).
; Note, that setting this option makes screenshots from TradingView which may be in violation with TradingView's term of
; use (see https://www.tradingview.com/policies/).
screenshot_path =
; Options are:
; - alert: create a screenshot when the alert is set
; - summary: create a screenshot when the summary is made (faster)
screenshot_timing = summary
; Path were watchlists are stored, e.g. watchlists (don't use quotation marks).
watchlist_path =
; Create a screenshot on some errors (some errors are unsupported for now)
screenshot_on_error = false
; Set a maximum of screenshots for each session to save disk space and disk I/O
max_screenshots_on_error = 3

[mail]
; Define the mailbox where you receive your TradingView Alert emails. For the time being this has only confirmed to work
; with Gmail. If you have provided TradingView with an email address that isn't Gmail than you'll need to forward those
; mails to a Gmail email address and use that Gmail account's info below.
; All values must be without quotation marks
uid =
; If you use gmail and have 2fa enabled you'll need to Sign in using App Passwords.
; More info about App Passwords can be found here: https://support.google.com/accounts/answer/185833?hl=en
pwd =
; Your mail provider's imap, e.g. imap.gmail.com
imap_server = imap.gmail.com
; Your mail provider's smtp, e.g. smtp.gmail.com
smtp_server = smtp.gmail.com
; Specify the mailbox to search for, e.g. inbox.
; Labels act as a mailbox as well.
; NOTE: whitespace is unsupported.
mailbox = inbox
; Search a mail for a term. If the term isn't found then it will not get processed,
; If you use Gmail, you can use Gmail Search Filters and do fancy stuff like
; in:inbox is:unread TradingView Alert:
; Note: if you are using Gmail Search Filters you'll need to set search_area below to X-GM-RAW
search_term =
; Possible values ALL, UNSEEN, SUBJECT, BODY, FROM amongst others. For a more in depth look visit
; https://www.example-code.com/python/imap_search.asp
; If you use Gmail you can set this to X-GM-RAW and use Gmail Search Filters to do fancy stuff like:
; is:unread label:tradingview_alerts subject:("TradingView Alert") alert triggered.
; If left blank it will default to UNSEEN.
search_area = UNSEEN
; By default the summary will be send as a list.
; You can set this to 'table' in which case it will be send in a table format instead. Note that doing so you won't have
; pretty, pretty, pretty screenshots.
format = list

[api]
; Path to the JSON file that holds the API credentials
; This is used for exporting signals to a Google Spreadsheet
; You configure your API setting here: https://console.developers.google.com/apis/dashboard
; A tutorial on how to setup API authentication can be found here: https://cloud.google.com/docs/authentication/end-user
; You'll only need to be concerned with the sections 'Setting up your project' and 'Creating your client credentials'
google = google-api.json
; By default you get from Google 100 request per 100 seconds per user
; If you have a higher quota you can set it here
google_write_requests_per_100_seconds_per_user = 100

[mongodb]
; Define the location of your mongodb collection
connection_string = mongodb://user:password@servername/dbname