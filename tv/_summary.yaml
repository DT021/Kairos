summary:
  # Create email
  email:
    # List of comma separated values
    to: ['my_name@example.com', 'my_alias@example.com']
    # List of comma separated values
    cc: ['my_cc@example.com', 'my_cc_alias@example.com']
    # List of comma separated values
    # Note: not all email providers support bcc (e.g. gmail)
    bcc: ['my_bcc@example.com', 'my_bcc@example.com']
    subject: 'TradingView Alert Summary'
    # Use keyword %SUMMARY in your text and/or html to include the Kairos generated summary
    text: 'my prepended text %SUMMARY my appended text'
    # Note: you may include <html> and <body> tags but it is not necessary (Kairos will include them if they aren't found)
    html: '<p>my prepended text</p>%SUMMARY<p>my appended text</p>'
    # If you just want to send the signals to webhooks (see your config file) or import them as a watchlist, set this to no
    send: yes
    # if you want to shield recipients from seeing each other's email address, set this to yes
    one-mail-per-recipient: yes
  # Create a watchlist of summarized signals
  watchlist:
    # Keywords %DATE (yyyymmdd), %TIME (hhmm)
    # Note: will overwrite watchlists of the same name
    name: 'summary_%DATE_%TIME'
    # Import the watchlist into TV
    # Note: existing watchlists of the same name will be deleted
    # Note: this will make use of your clipboard to insert the filename in TV's upload file dialog
    import: no
    # Attach to summary email
    attach-to-email: yes
  # Send individual signals to one or more lists webhooks when one out of a list of search_criteria is met
  webhooks:
    - url: ['https://hooks.zapier.com/hooks/catch/my_id/<webhook_id>']
      # Only send signals of alerts that contain one of the following of the keywords. If the list is empty, signals will always be send.
      search_criteria: ['search_text', 'second_search_text']
      # Send the signals in batches. Set to 0 or leave it empty to send all signals at once
      batch_size: 0
      # Enabled? (yes / no)
      enabled: yes
  # Export data to Google Sheets
  # Note that you will need to setup permissions as explained here:
  # - https://www.twilio.com/blog/2017/02/an-easy-way-to-read-and-write-to-a-google-spreadsheet-in-python.html (part 'Google Drive API and Service Accounts')
  # Data will be exported in the following order: timestamp, alert, chart, screenshot, exchange, symbol
  google_sheets:
    # File name
    - name: 'name'
      # Sheet name
      sheet: 'sheet'
      # Index, i.e. the row number where the data should be inserted. Use 1 for the top row, or 2 if the top row contains your column titles.
      index: 2
      # Only export signals that contain one of the following of the keywords. If the list is empty, signals will always be send.
      search_criteria: ['search_text', 'second_search_text']
      # Enabled? (yes / no)
      enabled: yes
webdriver:
  # Run the webdriver in the background or not (this overrides the setting in the configuration file)
  run-in-backrgound: yes